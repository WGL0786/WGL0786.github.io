<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello Friend</title>
    
    
    
    <link>http://WGL0786.github.io/</link>
    <description>Recent content on Hello Friend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://WGL0786.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://WGL0786.github.io/post/myprofile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://WGL0786.github.io/post/myprofile/</guid>
      <description>
        
          
          
          
        
        
        
          第1章 Java基础 # 1.1 重写和重载的区别 # 重写（Override）：方法名与参数名都一样，返回类型也一样。 重载（Overload）：方法名相同参数不同，返回类型也可以修改。 ​	总的来说，重写和重载都是 Java 中常用的方法定义方式，它们的区别在于是否改变方法的行为以及如何进行方法调用。重写强调子类对父类的覆盖和多态性，重载强调相同方法名但不同参数列表的重载和方法重载的方便性。
1.2 String 和 StringBuffer、StringBuilder 的区别是什么，String 为什么是不可变的 # String 类是不可变的，即一旦创建就不能被修改。而 StringBuffer 和 StringBuilder 是可变的，可以进行修改操作。 String 类是线程安全的，可以在多线程环境下被共享。StringBuffer 也是线程安全的，支持多线程并发操作。而 StringBuilder 则是非线程安全的，适合单线程环境下的操作。 String 类的拼接操作（使用+连接多个字符串）会创建新的String对象，导致内存消耗较大。而 StringBuffer 和 StringBuilder 的拼接操作则是直接在原有的对象上进行修改，不会创建新的对象，因此更加高效。 String 类的内部实现采用了字符数组的形式存储，而 StringBuffer 和 StringBuilder 的内部实现则采用了字符数组和可变容量缓冲区的形式存储，使得它们更加高效地支持字符串的修改操作。 ​	关于为什么 String 是不可变的，主要是为了保证字符串常量的安全性和不可更改性。如果 String 是可变的，那么任何一个持有该字符串引用的地方都可以修改它的值，这会导致安全问题和不可预期的行为。为了避免这种问题，Java 中将 String 设计成了不可变的类，保证了字符串常量的不可修改性，同时也提高了内存使用效率和程序的运行效率。
1.3 自动装箱与拆箱 # ​	自动装箱和拆箱是 Java 5 中引入的特性，用于简化基本数据类型和对应包装类型之间的转换操作。
​	自动装箱（Autoboxing）是指将基本数据类型转换为对应的包装类型的过程，例如将 int 类型的数据赋值给 Integer 类型的变量。自动装箱由编译器自动完成，避免了手动进行装箱操作的繁琐。
示例代码：
int num = 10; Integer numObj = num; // 自动装箱 ​	自动拆箱（Unboxing）是指将包装类型转换为对应的基本数据类型的过程，例如将 Integer 类型的数据赋值给 int 类型的变量。自动拆箱也由编译器自动完成，避免了手动进行拆箱操作的繁琐。
          
        
        </description>
    </item>
    
  </channel>
</rss>